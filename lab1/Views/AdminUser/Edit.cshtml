@using lab1.Models.ViewModel
@using Microsoft.AspNetCore.Identity
@model EditUserVM
@{
    ViewData["Title"] = "Edit User: " + Model.UserName;
}

<div class="container mt-5">
    <h1 class="display-4 text-center mb-4">Edit User Details and Roles</h1>
    <hr />

    <div class="row">
        <div class="col-md-8 offset-md-2">

            <form asp-action="Edit" method="post">
                <div asp-validation-summary="All" class="text-danger"></div>

                <!-- Hidden Input for ID (Crucial for POST) -->
                <input type="hidden" asp-for="Id" />

                <!-- User Details Section -->
                <h4 class="mb-3">User Information</h4>

                <div class="form-group mb-3">
                    <label asp-for="UserName" class="form-label"></label>
                    <input asp-for="UserName" class="form-control" />
                    <span asp-validation-for="UserName" class="text-danger"></span>
                </div>

                <div class="form-group mb-4">
                    <label asp-for="Email" class="form-label"></label>
                    <input asp-for="Email" class="form-control" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>

                <hr class="my-4" />

                <!-- Role Management Section -->
                <h4 class="mb-3">Manage Roles</h4>
                <div class="card p-4 shadow-sm">
                    <p class="text-muted">Select the roles you want to assign to this user.</p>

                    @if (Model.AllRoles.Any())
                    {
                        @for (int i = 0; i < Model.AllRoles.Count; i++)
                        {
                            var role = Model.AllRoles[i];

                            // Determine if the checkbox should be pre-checked
                            bool isChecked = Model.UserRoles.Contains(role.Name);

                            <div class="form-check mb-2">
                                <!-- The hidden input ensures that unchecked boxes are still represented in the POST request as a null value for model binding. -->
                                <input type="hidden" name="SelectedRoles.Index" value="@i" />

                                <input type="checkbox"
                                       class="form-check-input"
                                       id="role_@role.Id"
                                       name="SelectedRoles[@i]"
                                       value="@role.Name"
                                       @Html.Raw(isChecked ? "checked" : "") />
                                <label class="form-check-label" for="role_@role.Id">
                                    @role.Name
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-danger">No roles available in the system.</p>
                    }
                </div>

                <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                    <button type="submit" class="btn btn-success btn-lg">Save Changes</button>
                    <a asp-action="Index" class="btn btn-secondary btn-lg">Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        // Enable client-side validation
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
